File Tree:
main.dart
models/user_model.dart
models/challenge_model.dart
models/feed_item.dart
screens/home/home.dart
screens/authenticate/login.dart
screens/authenticate/register.dart
screens/authenticate/authenticate.dart
screens/challenges/challenge_detail_screen.dart
screens/challenges/challenge_list_screen.dart
screens/rewards/reward_list_screen.dart
screens/rewards/rewards_screen.dart
screens/profile/profile_screen.dart
services/auth_service.dart
services/api_service.dart
services/challenge_service.dart
widgets/custom_header.dart
widgets/custom_footer.dart
widgets/theme-1/challenge_detail_screen.dart
widgets/theme-1/challenges_screen.dart
widgets/theme-1/ad_banner.dart
widgets/theme-1/colors.dart
widgets/theme-1/theme_switcher.dart
widgets/theme-1/profile_screen.dart
widgets/theme-1/register_screen.dart
widgets/theme-1/user_activity_notification.dart
widgets/theme-1/app_bar.dart
widgets/theme-1/login_screen.dart
widgets/theme-1/welcome_banner.dart
widgets/theme-1/bottom_navigation.dart
widgets/theme-1/challenge_card.dart
widgets/theme-1/home_screen.dart
widgets/theme-1/feed_item.dart

File: ./main.dart
Code:
import 'package:flutter/material.dart';
import 'widgets/theme-1/app_bar.dart';
import 'widgets/theme-1/bottom_navigation.dart';
import 'widgets/theme-1/home_screen.dart';
import 'widgets/theme-1/challenges_screen.dart';
import 'widgets/theme-1/login_screen.dart';
import 'widgets/theme-1/profile_screen.dart';
import 'widgets/theme-1/register_screen.dart';
import 'widgets/theme-1/challenge_detail_screen.dart';
import 'widgets/theme-1/ad_banner.dart';
import 'widgets/theme-1/user_activity_notification.dart';
import 'widgets/theme-1/feed_item.dart';
import 'widgets/theme-1/colors.dart';

void main() {
  runApp(ChallengeWTFApp());
}

class ChallengeWTFApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Challenge .wtf',
      theme: ThemeData(
        primaryColor: primaryColor,
        scaffoldBackgroundColor: backgroundColor,
        appBarTheme: AppBarTheme(
          backgroundColor: primaryColor,
          titleTextStyle: TextStyle(color: lightTextColor, fontSize: 20, fontFamily: 'GameFont'),
        ),
        bottomNavigationBarTheme: BottomNavigationBarThemeData(
          backgroundColor: primaryColor,
          selectedItemColor: lightTextColor,
          unselectedItemColor: mutedTextColor,
        ),
        fontFamily: 'GameFont',
      ),
      home: ChallengeWTFHomePage(),
      routes: {
        '/login': (context) => LoginScreen(),
        '/register': (context) => RegisterScreen(),
        '/challenge_detail': (context) => ChallengeDetailScreen(),
      },
    );
  }
}

class ChallengeWTFHomePage extends StatefulWidget {
  @override
  _ChallengeWTFHomePageState createState() => _ChallengeWTFHomePageState();
}

class _ChallengeWTFHomePageState extends State<ChallengeWTFHomePage> {
  int _selectedIndex = 0;

  static List<Widget> _widgetOptions = <Widget>[
    HomeScreen(),
    ChallengesScreen(),
    ProfileScreen(),
  ];

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: CustomAppBar(showBackButton: _selectedIndex != 0),
      body: Center(
        child: _widgetOptions.elementAt(_selectedIndex),
      ),
      bottomNavigationBar: CustomBottomNavigationBar(
        selectedIndex: _selectedIndex,
        onItemTapped: _onItemTapped,
      ),
    );
  }
}



File: ./models/user_model.dart
Code:
class UserModel {
  final String id;
  final String name;
  final String email;
  final String profilePictureUrl;
  final String bio; 

  UserModel({
    required this.id,
    required this.name,
    required this.email,
    required this.profilePictureUrl,
    this.bio = '', 
  });

  factory UserModel.fromJson(Map<String, dynamic> json) {
    return UserModel(
      id: json['id'].toString(),
      name: json['name'] ?? '',
      email: json['email'] ?? '',
      profilePictureUrl: json['profilePictureUrl'] ?? '',
      bio: json['bio'] ?? '', 
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'email': email,
      'profilePictureUrl': profilePictureUrl,
      'bio': bio, 
    };
  }
}



File: ./models/challenge_model.dart
Code:
import 'package:flutter/material.dart';

class ChallengeModel {
  final String? id;
  final String title;
  final String description;
  final int participants;
  final int prize;
  final String image;
  final ChallengeType? type;

  ChallengeModel({
    this.id,
    required this.title,
    required this.description,
    required this.participants,
    required this.prize,
    required this.image,
    this.type,
  });
}

enum ChallengeType {
  fitness,
  sports,
  creativity,
  tech,
}



File: ./models/feed_item.dart
Code:
enum FeedItemType {
  challenge,
  ad,
  userActivity,
}

class FeedItem {
  final FeedItemType type;
  final Map<String, dynamic> data;

  FeedItem({required this.type, required this.data});
}



File: ./screens/home/home.dart
Code:
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:cwtf_app/services/challenge_service.dart';
import 'package:cwtf_app/widgets/feed/feed.dart';

class Home extends StatefulWidget {
  @override
  _HomeState createState() => _HomeState();
}

class _HomeState extends State<Home> {
  @override
  void initState() {
    super.initState();
    _fetchChallenges();
  }

  Future<void> _fetchChallenges() async {
    final challengeService = Provider.of<ChallengeService>(context, listen: false);
    await challengeService.fetchChallenges();
  }

  @override
  Widget build(BuildContext context) {
    return Feed();
  }
}



File: ./screens/authenticate/login.dart
Code:
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:cwtf_app/services/auth_service.dart';

class LoginScreen extends StatefulWidget {
  final Function toggleView;

  LoginScreen({required this.toggleView});

  @override
  _LoginScreenState createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  String _errorMessage = '';

  final List<String> descriptions = [
    "Виконуйте щоденні завдання та збирайте бали WTF!", // Ukraynaca
    "¡Desafía a tus amigos y alcanza la cima!", // İspanyolca
    "毎日のタスクを完了して、WTFポイントを獲得しよう！", // Japonca
    "أكمل المهام اليومية واحصل على نقاط WTF!", // Arapça
    "Participă la evenimentele comunității și găsește prieteni noi.", // Rumence
    "Completa le missioni e raccogli i punti WTF.", // İtalyanca
    "목표를 설정하고 성공을 달성하십시오.", // Korece
    "Achivementsınızı paylaşın ve başkalarıyla etkileşimde bulunun.", // Türkçe
    "每天都有新的任务等着你。", // Çince (Basitleştirilmiş)
    "Motivasyonunuzu yüksek tutun ve zirveye ulaşın.", // Türkçe
];

  @override
  Widget build(BuildContext context) {
    final authService = Provider.of<AuthService>(context);

    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: Icon(Icons.arrow_back, color: Colors.white, size: 30),
          onPressed: () {
            Navigator.pop(context);
          },
        ),
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [Colors.blueGrey[900]!, Colors.blueGrey[700]!],
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
          ),
        ),
        child: SingleChildScrollView(
          child: ConstrainedBox(
            constraints: BoxConstraints(
              minHeight: MediaQuery.of(context).size.height,
            ),
            child: IntrinsicHeight(
              child: Padding(
                padding: EdgeInsets.all(16.0),
                child: Column(
                  children: <Widget>[
                    SizedBox(height: 100), // AppBar için eklenmiş yüksekliği telafi etmek için
                    Text(
                      'Welcome Back',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 32,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    SizedBox(height: 10),
                    Text(
                      'Please login to your account',
                      style: TextStyle(
                        color: Colors.white70,
                        fontSize: 18,
                      ),
                    ),
                    SizedBox(height: 20),
                    if (_errorMessage.isNotEmpty)
                      Padding(
                        padding: const EdgeInsets.only(bottom: 10.0),
                        child: Text(
                          _errorMessage,
                          style: TextStyle(
                            color: Colors.red,
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                          textAlign: TextAlign.center,
                        ),
                      ),
                    Card(
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(16),
                      ),
                      elevation: 5,
                      child: Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Column(
                          children: <Widget>[
                            TextField(
                              controller: _emailController,
                              decoration: InputDecoration(
                                labelText: 'Email',
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(8),
                                ),
                              ),
                            ),
                            SizedBox(height: 20),
                            TextField(
                              controller: _passwordController,
                              decoration: InputDecoration(
                                labelText: 'Password',
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(8),
                                ),
                              ),
                              obscureText: true,
                            ),
                            SizedBox(height: 20),
                            ElevatedButton(
                              onPressed: () async {
                                final email = _emailController.text;
                                final password = _passwordController.text;
                                try {
                                  bool success = await authService.login(email, password);
                                  if (success) {
                                    Navigator.pop(context); // Ekranı kapat
                                  }
                                } catch (e) {
                                  setState(() {
                                    _errorMessage = 'Invalid email or password. Please try again.';
                                  });
                                }
                              },
                              child: Text('Login'),
                              style: ElevatedButton.styleFrom(
                                padding: EdgeInsets.symmetric(vertical: 12, horizontal: 32),
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(8),
                                ),
                              ),
                            ),
                            TextButton(
                              onPressed: () => widget.toggleView(),
                              child: Text(
                                "Don't have an account? Register",
                                style: TextStyle(color: Colors.blueGrey[900]),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    SizedBox(height: 30),
                    Text(
                      descriptions[DateTime.now().millisecondsSinceEpoch % descriptions.length],
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 12,
                        fontStyle: FontStyle.italic,
                      ),
                      textAlign: TextAlign.center,
                    ),
                    Expanded(child: Container()), // Boş alanı doldurmak için Expanded widget'ı ekledik.
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}


File: ./screens/authenticate/register.dart
Code:
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:cwtf_app/services/auth_service.dart';

class RegisterScreen extends StatefulWidget {
  final Function toggleView;
  RegisterScreen({required this.toggleView});

  @override
  _RegisterScreenState createState() => _RegisterScreenState();
}

class _RegisterScreenState extends State<RegisterScreen> {
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  String _errorMessage = '';

  final List<String> descriptions = [
    "Günlük görevleri tamamla, WTF puanlarını kap!",
    "Arkadaşlarına meydan oku, zirveye tırman!",
    "Yepyeni zorluklarla kendini test et.",
    "Her günün daha renkli, daha eğlenceli olsun.",
    "Topluluk etkinliklerine katıl, yeni kankalar edin.",
    "Görevleri bitir, WTF puanlarını topla.",
    "Hedeflerini belirle, başarıya ulaş.",
    "Başarılarını paylaş, diğerleriyle etkileşimde bulun.",
    "Seni bekleyen yeni görevler her gün yenileniyor.",
    "Motivasyonunu yüksek tut, zirveye ulaş."
  ];

  @override
  Widget build(BuildContext context) {
    final authService = Provider.of<AuthService>(context);

    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: Icon(Icons.arrow_back, color: Colors.white, size: 30),
          onPressed: () {
            Navigator.pop(context);
          },
        ),
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [Colors.blueGrey[900]!, Colors.blueGrey[700]!],
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
          ),
        ),
        child: SingleChildScrollView(
          child: ConstrainedBox(
            constraints: BoxConstraints(
              minHeight: MediaQuery.of(context).size.height,
            ),
            child: IntrinsicHeight(
              child: Padding(
                padding: EdgeInsets.all(16.0),
                child: Column(
                  children: <Widget>[
                    SizedBox(height: 100), // AppBar için eklenmiş yüksekliği telafi etmek için
                    Text(
                      'Create Account',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 32,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    SizedBox(height: 10),
                    Text(
                      'Please register to create an account',
                      style: TextStyle(
                        color: Colors.white70,
                        fontSize: 18,
                      ),
                    ),
                    SizedBox(height: 20),
                    if (_errorMessage.isNotEmpty)
                      Padding(
                        padding: const EdgeInsets.only(bottom: 10.0),
                        child: Text(
                          _errorMessage,
                          style: TextStyle(
                            color: Colors.red,
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                          textAlign: TextAlign.center,
                        ),
                      ),
                    Card(
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(16),
                      ),
                      elevation: 5,
                      child: Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Column(
                          children: <Widget>[
                            TextField(
                              controller: _emailController,
                              decoration: InputDecoration(
                                labelText: 'Email',
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(8),
                                ),
                              ),
                            ),
                            SizedBox(height: 20),
                            TextField(
                              controller: _passwordController,
                              decoration: InputDecoration(
                                labelText: 'Password',
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(8),
                                ),
                              ),
                              obscureText: true,
                            ),
                            SizedBox(height: 20),
                            ElevatedButton(
                              onPressed: () async {
                                final email = _emailController.text;
                                final password = _passwordController.text;
                                try {
                                  await authService.register(email, password);
                                  Navigator.pop(context); // Ekranı kapat
                                } catch (e) {
                                  setState(() {
                                    _errorMessage = 'Invalid email or password. Please try again.';
                                  });
                                }
                              },
                              child: Text('Register'),
                              style: ElevatedButton.styleFrom(
                                padding: EdgeInsets.symmetric(vertical: 12, horizontal: 32),
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(8),
                                ),
                              ),
                            ),
                            TextButton(
                              onPressed: () => widget.toggleView(),
                              child: Text(
                                "Already have an account? Sign in",
                                style: TextStyle(color: Colors.blueGrey[900]),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    SizedBox(height: 30),
                    Text(
                      descriptions[DateTime.now().millisecondsSinceEpoch % descriptions.length],
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 18,
                        fontStyle: FontStyle.italic,
                      ),
                      textAlign: TextAlign.center,
                    ),
                    Expanded(child: Container()), // Boş alanı doldurmak için Expanded widget'ı ekledik.
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}


File: ./screens/authenticate/authenticate.dart
Code:
import 'package:flutter/material.dart';
import 'package:cwtf_app/screens/authenticate/login.dart';
import 'package:cwtf_app/screens/authenticate/register.dart';

class Authenticate extends StatefulWidget {
  final bool showSignIn;

  Authenticate({this.showSignIn = true});

  @override
  _AuthenticateState createState() => _AuthenticateState();
}

class _AuthenticateState extends State<Authenticate> {
  bool showSignIn = true;

  @override
  void initState() {
    super.initState();
    showSignIn = widget.showSignIn;
  }

  void toggleView() {
    setState(() {
      showSignIn = !showSignIn;
    });
  }

  @override
  Widget build(BuildContext context) {
    return showSignIn
        ? LoginScreen(toggleView: toggleView)
        : RegisterScreen(toggleView: toggleView);
  }
}


File: ./screens/challenges/challenge_detail_screen.dart
Code:
import 'package:flutter/material.dart';
import 'package:cwtf_app/models/challenge_model.dart';
import 'package:provider/provider.dart';
import 'package:cwtf_app/services/auth_service.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';

class ChallengeDetailScreen extends StatelessWidget {
  final ChallengeModel challenge;

  ChallengeDetailScreen({required this.challenge});

  @override
  Widget build(BuildContext context) {
    final authService = Provider.of<AuthService>(context);
    final isAuthenticated = authService.isAuthenticated;

    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: Icon(Icons.arrow_back, color: Colors.white, size: 30),
          onPressed: () {
            Navigator.pop(context);
          },
        ),
        title: Text(
          '.wtf',
          style: TextStyle(
            fontSize: 36.sp,
            fontWeight: FontWeight.bold,
            color: Colors.white,
          ),
        ),
      ),
      body: Stack(
        children: [
          Container(
            height: 300.h,
            decoration: BoxDecoration(
              image: DecorationImage(
                image: NetworkImage('https://picsum.photos/600/400'),
                fit: BoxFit.cover,
              ),
            ),
            child: Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [
                    Colors.black.withOpacity(0.7),
                    Colors.black.withOpacity(0.3),
                    Colors.transparent
                  ],
                  begin: Alignment.topCenter,
                  end: Alignment.bottomCenter,
                ),
              ),
            ),
          ),
          SingleChildScrollView(
            padding: EdgeInsets.only(top: 250.h),
            child: Container(
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
              ),
              child: Padding(
                padding: EdgeInsets.all(16.w),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      challenge.title,
                      style: TextStyle(
                          fontSize: 28.sp, fontWeight: FontWeight.bold),
                    ),
                    SizedBox(height: 8.h),
                    Text(
                      'Challenge Type: Fitness',
                      style:
                          TextStyle(fontSize: 16.sp, color: Colors.grey[600]),
                    ),
                    SizedBox(height: 16.h),
                    Text(
                      'Description: A travel-based challenge where participants document their journey to a specific location, completing tasks along the way.',
                      style: TextStyle(fontSize: 16.sp),
                    ),
                    SizedBox(height: 16.h),
                    GridView.count(
                      crossAxisCount: 2,
                      crossAxisSpacing: 16.w,
                      mainAxisSpacing: 16.h,
                      shrinkWrap: true,
                      physics: NeverScrollableScrollPhysics(),
                      children: [
                        _buildRewardCard('Total Points', '1000'),
                        _buildRewardCard('XP', '500'),
                        _buildRewardCard('WTF Crypto', '50'),
                        _buildRewardCard('NFT', 'Special Badge'),
                      ],
                    ),
                    SizedBox(height: 16.h),
                    Text(
                      'NFT Address:',
                      style: TextStyle(
                          fontSize: 16.sp, fontWeight: FontWeight.bold),
                    ),
                    InkWell(
                      child: Text(
                        'https://opensea.io/xyz123',
                        style: TextStyle(fontSize: 16.sp, color: Colors.blue),
                      ),
                      onTap: () {
                        // NFT adresine yönlendir
                      },
                    ),
                    SizedBox(height: 8.h),
                    Text(
                      'NFT Contract Address:',
                      style: TextStyle(
                          fontSize: 16.sp, fontWeight: FontWeight.bold),
                    ),
                    InkWell(
                      child: Text(
                        'https://etherscan.io/address/abc456',
                        style: TextStyle(fontSize: 16.sp, color: Colors.blue),
                      ),
                      onTap: () {
                        // NFT contract adresine yönlendir
                      },
                    ),
                    SizedBox(height: 16.h),
                    Text(
                      'Participants: 150',
                      style: TextStyle(fontSize: 16.sp),
                    ),
                    SizedBox(height: 8.h),
                    Text(
                      'Start Date: 01/07/2024',
                      style: TextStyle(fontSize: 16.sp),
                    ),
                    SizedBox(height: 8.h),
                    Text(
                      'Duration: 30 days',
                      style: TextStyle(fontSize: 16.sp),
                    ),
                    SizedBox(height: 16.h),
                    Text(
                      'Requirements:',
                      style: TextStyle(
                          fontSize: 16.sp, fontWeight: FontWeight.bold),
                    ),
                    Text(
                      '• Exercise at least 30 minutes a day.\n• Adopt healthy eating habits.\n• Submit weekly reports.',
                      style: TextStyle(fontSize: 16.sp),
                    ),
                    SizedBox(height: 16.h),
                    Text(
                      'Rules:',
                      style: TextStyle(
                          fontSize: 16.sp, fontWeight: FontWeight.bold),
                    ),
                    Text(
                      '• If the rules are not followed, the challenge is considered failed.\n• No days without reports are accepted.\n• Motivate others.',
                      style: TextStyle(fontSize: 16.sp),
                    ),
                    SizedBox(height: 16.h),
                    Text(
                      'FAQ:',
                      style: TextStyle(
                          fontSize: 16.sp, fontWeight: FontWeight.bold),
                    ),
                    Text(
                      'Q: How can I join this challenge?\nA: You can join by clicking the join button.',
                      style: TextStyle(fontSize: 16.sp),
                    ),
                    
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
      bottomNavigationBar: Padding(
        padding: EdgeInsets.all(16.0.w),
        child: ElevatedButton(
          onPressed: () {
            if (isAuthenticated) {
              // Challenge'ı kabul etme işlemi
            } else {
              Navigator.pushNamed(context, '/authenticate');
            }
          },
          child: Text(
            'Accept Challenge',
            style: TextStyle(
              fontSize: 20.sp,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.red,
            padding: EdgeInsets.symmetric(vertical: 16.h, horizontal: 32.w),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildRewardCard(String title, String value) {
    return Card(
      color: Colors.blueGrey[50],
      elevation: 5,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: Padding(
        padding: EdgeInsets.all(12.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              title,
              style: TextStyle(fontSize: 14.sp, color: Colors.grey[600]),
            ),
            SizedBox(height: 8.h),
            Text(
              value,
              style: TextStyle(fontSize: 18.sp, fontWeight: FontWeight.bold),
            ),
          ],
        ),
      ),
    );
  }
}


File: ./screens/challenges/challenge_list_screen.dart
Code:
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:cwtf_app/services/challenge_service.dart';
import 'package:cwtf_app/widgets/feed/challenge_card.dart';
import 'package:cwtf_app/screens/challenges/challenge_detail_screen.dart';

class ChallengeListScreen extends StatefulWidget {
  @override
  _ChallengeListScreenState createState() => _ChallengeListScreenState();
}

class _ChallengeListScreenState extends State<ChallengeListScreen> {
  @override
  void initState() {
    super.initState();
    _fetchChallenges();
  }

  Future<void> _fetchChallenges() async {
    final challengeService = Provider.of<ChallengeService>(context, listen: false);
    await challengeService.fetchChallenges();
  }

  @override
  Widget build(BuildContext context) {
    final challengeService = Provider.of<ChallengeService>(context);

    return Padding(
      padding: const EdgeInsets.all(8.0),
      child: challengeService.challenges.isEmpty
          ? Center(child: CircularProgressIndicator())
          : GridView.builder(
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                crossAxisSpacing: 8.0,
                mainAxisSpacing: 8.0,
                childAspectRatio: 1,
              ),
              itemCount: challengeService.challenges.length,
              itemBuilder: (context, index) {
                final challenge = challengeService.challenges[index];
                return GestureDetector(
                  onTap: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => ChallengeDetailScreen(challenge: challenge),
                      ),
                    );
                  },
                  child: ChallengeCard(challenge: challenge),
                );
              },
            ),
    );
  }
}



File: ./screens/rewards/reward_list_screen.dart
Code:
import 'package:flutter/material.dart';
import 'package:cwtf_app/widgets/custom_header.dart';
import 'package:cwtf_app/widgets/custom_footer.dart';

class RewardListScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: ListView.builder(
          itemCount: 10,
          itemBuilder: (context, index) {
            return Card(
              child: ListTile(
                leading: Icon(Icons.card_giftcard),
                title: Text('Reward ${index + 1}'),
                subtitle: Text('Details about reward ${index + 1}'),
              ),
            );
          },
        ),
      ),
    );
  }
}



File: ./screens/rewards/rewards_screen.dart
Code:
import 'package:flutter/material.dart';
import 'package:cwtf_app/widgets/custom_header.dart';
import 'package:cwtf_app/widgets/custom_footer.dart';

class RewardsScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: CustomHeader(),
      body: Center(
        child: Text(
          'Rewards',
          style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
        ),
      ),
      bottomNavigationBar: CustomFooter(),
    );
  }
}



File: ./screens/profile/profile_screen.dart
Code:
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:cwtf_app/services/auth_service.dart';

class ProfileScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Profile'),
      ),
      body: Center(
        child: Text('This is the profile screen'),
      ),
    );
  }
}


// class ProfileScreen extends StatelessWidget {
//   @override
//   Widget build(BuildContext context) {
//     final authService = Provider.of<AuthService>(context);
//     final user = authService.user;

//     return Scaffold(
//       appBar: AppBar(
//         title: Text('Profile'),
//       ),
//       body: user == null
//           ? Center(child: Text('No user information'))
//           : Padding(
//               padding: const EdgeInsets.all(16.0),
//               child: Column(
//                 children: <Widget>[
//                   CircleAvatar(
//                     radius: 50,
//                     backgroundImage: NetworkImage(user.profilePictureUrl),
//                   ),
//                   SizedBox(height: 16),
//                   Text(
//                     user.name,
//                     style: TextStyle(fontSize: 24),
//                   ),
//                   SizedBox(height: 8),
//                   Text(
//                     user.email,
//                     style: TextStyle(fontSize: 16),
//                   ),
//                 ],
//               ),
//             ),
//     );
//   }
// }


File: ./services/auth_service.dart
Code:
import 'package:flutter/material.dart';
import 'package:dio/dio.dart';
import 'dart:convert';
import 'package:cwtf_app/models/user_model.dart';

class AuthService with ChangeNotifier {
  UserModel? _user;
  String? _token;

  UserModel? get user => _user;
  bool get isAuthenticated => _user != null;

  final String baseUrl = 'http://localhost:3000/api/auth';
  final Dio _dio = Dio();

  AuthService() {
    // Configure Dio
    _dio.options = BaseOptions(
      baseUrl: baseUrl,
      connectTimeout: 5000,
      receiveTimeout: 3000,
      headers: {
        'Content-Type': 'application/json',
      },
    );
  }

  Future<void> register(String email, String password) async {
    try {
      final response = await _dio.post('/register', data: {
        'email': email,
        'password': password,
      });

      if (response.statusCode == 201) {
        final jsonResponse = response.data;
        if (jsonResponse.containsKey('token')) {
          _token = jsonResponse['token'];
          _user = _decodeJWT(_token!);
          notifyListeners();
          await login(email, password); // Auto-login after registration
        } else {
          throw Exception('Invalid response format');
        }
      } else {
        throw Exception('Failed to register');
      }
    } on DioError catch (e) {
      throw Exception('Error: ${e.response?.data ?? e.message}');
    }
  }

  Future<bool> login(String email, String password) async {
    try {
      final response = await _dio.post('/login', data: {
        'email': email,
        'password': password,
      });

      if (response.statusCode == 200) {
        final jsonResponse = response.data;
        if (jsonResponse.containsKey('token')) {
          _token = jsonResponse['token'];
          _user = _decodeJWT(_token!);
          notifyListeners();
          return true;
        } else {
          throw Exception('Invalid response format');
        }
      } else {
        throw Exception('Failed to login');
      }
    } on DioError catch (e) {
      throw Exception('Error: ${e.response?.data ?? e.message}');
    }
  }

  UserModel _decodeJWT(String token) {
    final parts = token.split('.');
    if (parts.length != 3) {
      throw Exception('Invalid token');
    }
    final payload = _decodeBase64(parts[1]);
    final payloadMap = json.decode(payload);
    if (payloadMap is! Map<String, dynamic>) {
      throw Exception('Invalid payload');
    }
    return UserModel.fromJson(payloadMap);
  }

  String _decodeBase64(String str) {
    String output = str.replaceAll('-', '+').replaceAll('_', '/');
    switch (output.length % 4) {
      case 0:
        break;
      case 2:
        output += '==';
        break;
      case 3:
        output += '=';
        break;
      default:
        throw Exception('Illegal base64url string!"');
    }
    return utf8.decode(base64Url.decode(output));
  }

  void logout() {
    _user = null;
    _token = null;
    notifyListeners();
  }
}


File: ./services/api_service.dart
Code:
import 'package:dio/dio.dart';

class ApiService {
  final Dio _dio = Dio();

  Future<List<dynamic>> fetchChallenges() async {
    try {
      final response = await _dio.get('http://localhost:3000/api/challenges');
      return response.data;
    } catch (e) {
      throw Exception('Failed to load challenges');
    }
  }
}



File: ./services/challenge_service.dart
Code:
import 'package:flutter/material.dart';
import 'package:cwtf_app/models/challenge_model.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class ChallengeService with ChangeNotifier {
  List<ChallengeModel> _challenges = [];

  List<ChallengeModel> get challenges => _challenges;

  Future<void> fetchChallenges() async {
    final response = await http.get(Uri.parse('http://localhost:3000/api/challenges'));

    if (response.statusCode == 200) {
      final List<dynamic> challengeJson = json.decode(response.body);
      _challenges = challengeJson.map((json) => ChallengeModel.fromJson(json)).toList();
      notifyListeners();
    } else {
      throw Exception('Failed to load challenges');
    }
  }
}



File: ./widgets/custom_header.dart
Code:
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:cwtf_app/services/auth_service.dart';

class CustomHeaderDelegate extends SliverPersistentHeaderDelegate {
  @override
  Widget build(
      BuildContext context, double shrinkOffset, bool overlapsContent) {
    final authService = Provider.of<AuthService>(context);
    final isAuthenticated = authService.isAuthenticated;

    return AppBar(
      backgroundColor: Color(0xFF32936F),
      elevation: 10,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(
          bottom: Radius.circular(16),
        ),
      ),
      title: Padding(
        padding: const EdgeInsets.only(left: 16.0),
        child: Row(
          children: [
            Text(
              '.wtf',
              style: TextStyle(
                color: Colors.white,
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
      ),
      actions: [
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16.0),
          child: Row(
            children: [
              Icon(
                Icons.flash_on,
                size: 30,
                color: Colors.blue,
              ),
              SizedBox(width: 10),
              Icon(
                Icons.whatshot,
                color: Colors.orange,
              ),
              SizedBox(width: 0),
              IconButton(
                icon: Icon(
                  Icons.person_outline,
                  color: Colors.white,
                  size: 30,
                ),
                onPressed: () {
                  if (isAuthenticated) {
                    Navigator.pushNamed(context, '/profile');
                  } else {
                    Navigator.pushNamed(context, '/authenticate');
                  }
                },
              ),
              SizedBox(width: 2),
            ],
          ),
        )
      ],
      centerTitle: false,
    );
  }

  @override
  double get maxExtent => kToolbarHeight;

  @override
  double get minExtent => kToolbarHeight;

  @override
  bool shouldRebuild(SliverPersistentHeaderDelegate oldDelegate) {
    return false;
  }
}


File: ./widgets/custom_footer.dart
Code:
import 'package:flutter/material.dart';

class CustomFooter extends StatelessWidget {
  final int currentIndex;
  final Function(int) onTap;

  CustomFooter({required this.currentIndex, required this.onTap});

  @override
  Widget build(BuildContext context) {
    return BottomNavigationBar(
      currentIndex: currentIndex,
      onTap: onTap,
      items: [
        BottomNavigationBarItem(
          icon: Icon(Icons.home),
          label: 'Home',
        ),
        BottomNavigationBarItem(
          icon: Icon(Icons.star),
          label: 'Challenges',
        ),
        BottomNavigationBarItem(
          icon: Icon(Icons.redeem),
          label: 'Rewards',
        ),
      ],
    );
  }
}


File: ./widgets/theme-1/challenge_detail_screen.dart
Code:
// lib/screens/challenges/challenge_detail_screen.dart

import 'package:flutter/material.dart';
import 'package:cwtf_app/models/challenge_model.dart';

class ChallengeDetailScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final Map arguments = ModalRoute.of(context)!.settings.arguments as Map? ?? {};

    return Scaffold(
      appBar: AppBar(
        title: Text(arguments['title'] ?? 'Challenge Detail'),
      ),
      body: SingleChildScrollView(
        padding: EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
              height: 200,
              decoration: BoxDecoration(
                color: Colors.grey.shade300,
                borderRadius: BorderRadius.circular(12),
              ),
              child: Center(
                child: Icon(Icons.image, size: 50, color: Colors.grey),
              ),
            ),
            SizedBox(height: 16),
            Row(
              children: [
                Icon(arguments['icon'] ?? Icons.category, color: Colors.blue),
                SizedBox(width: 8),
                Text(
                  arguments['category'] ?? 'Category',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
              ],
            ),
            SizedBox(height: 16),
            Text(
              arguments['title'] ?? 'Title',
              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 8),
            Text(arguments['description'] ?? 'Description'),
            SizedBox(height: 16),
            Text('${arguments['participants'] ?? 0} participants'),
            SizedBox(height: 16),
            Text('Prize: \$${arguments['prize'] ?? 0}'),
          ],
        ),
      ),
    );
  }
}



File: ./widgets/theme-1/challenges_screen.dart
Code:
import 'package:flutter/material.dart';
import 'challenge_card.dart';

class ChallengesScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return ListView(
      padding: EdgeInsets.all(16),
      children: [
        ChallengeCard(
          icon: Icons.fitness_center,
          category: 'Fitness',
          participants: 10,
          title: '100 Push-ups in 60 Seconds',
          description: 'Can you beat the record and win the 500 dollars prize?',
          prize: 500,
        ),
        ChallengeCard(
          icon: Icons.sports_basketball,
          category: 'Sports',
          participants: 15,
          title: 'Basketball Free Throw Challenge',
          description: 'Can you make 20 free throws in a row?',
          prize: 750,
        ),
        ChallengeCard(
          icon: Icons.lightbulb_outline,
          category: 'Creativity',
          participants: 8,
          title: 'Origami Masterpiece',
          description: 'Create the most intricate origami sculpture.',
          prize: 300,
        ),
        ChallengeCard(
          icon: Icons.code,
          category: 'Tech',
          participants: 12,
          title: 'Hackathon Challenge',
          description: 'Build the most innovative app in 24 hours.',
          prize: 1000,
        ),
      ],
    );
  }
}



File: ./widgets/theme-1/ad_banner.dart
Code:
// lib/widgets/theme-1/ad_banner.dart

import 'package:flutter/material.dart';

class AdBanner extends StatelessWidget {
  final String imageUrl;
  final String adText;
  final Color color; // Color parameter added

  AdBanner({
    required this.imageUrl,
    required this.adText,
    required this.color, // Initialize color
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: EdgeInsets.symmetric(vertical: 10),
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: color, // Apply color
        borderRadius: BorderRadius.circular(12),
        image: DecorationImage(
          image: NetworkImage(imageUrl),
          fit: BoxFit.cover,
        ),
      ),
      child: Container(
        color: color.withOpacity(0.7), // Apply semi-transparent overlay
        child: Text(
          adText,
          style: TextStyle(
            color: Colors.white,
            fontSize: 16,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
    );
  }
}



File: ./widgets/theme-1/colors.dart
Code:
import 'package:flutter/material.dart';

const Color primaryColor = Color(0xFF0A1C28);
const Color backgroundColor = Color(0xFF1A2B38);
const Color cardColor = Color(0xFFF1FAEE);
const Color accentColor = Color(0xFFED174B);
const Color lightTextColor = Color(0xFFF1FAEE);
const Color darkTextColor = Color(0xFF1D3557);
const Color mutedTextColor = Color(0xFF32936F);


// const Color primaryColor = Color(0xFF0A1C28);
// const Color backgroundColor = Color(0xFF1A2B38);
// const Color cardColor = Color(0xFFF1FAEE);
// const Color accentColor = Color(0xFFED174B);
// const Color lightTextColor = Color(0xFFF1FAEE);
// const Color darkTextColor = Color(0xFF1D3557);
// const Color mutedTextColor = Color(0xFF457B9D);



File: ./widgets/theme-1/theme_switcher.dart
Code:
import 'package:flutter/material.dart';
import 'colors.dart';

class ThemeSwitcher extends StatelessWidget {
  final bool isTheme1;
  final VoidCallback onToggle;

  ThemeSwitcher({required this.isTheme1, required this.onToggle});

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Text(
          'Switch Theme',
          style: TextStyle(
            color: isTheme1 ? lightTextColor : darkTextColor,
          ),
        ),
        Switch(
          value: isTheme1,
          onChanged: (value) {
            onToggle();
          },
        ),
      ],
    );
  }
}



File: ./widgets/theme-1/profile_screen.dart
Code:
import 'package:flutter/material.dart';

class ProfileScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: <Widget>[
          CircleAvatar(
            radius: 50,
            backgroundImage: NetworkImage('https://via.placeholder.com/150'),
          ),
          SizedBox(height: 20),
          Text(
            'John Doe',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: Color(0xFFF1FAEE)),
          ),
          SizedBox(height: 10),
          Text(
            'john.doe@example.com',
            style: TextStyle(fontSize: 16, color: Color(0xFF234159)),
          ),
          SizedBox(height: 20),
          ElevatedButton(
            style: ElevatedButton.styleFrom(
              backgroundColor: Color(0xFFED174B),
              foregroundColor: Color(0xFFF1FAEE),
            ),
            onPressed: () {},
            child: Text('Edit Profile'),
          ),
        ],
      ),
    );
  }
}



File: ./widgets/theme-1/register_screen.dart
Code:
import 'package:flutter/material.dart';

class RegisterScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Register', style: TextStyle(color: Color(0xFFF1FAEE))),
      ),
      body: Padding(
        padding: EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            TextField(
              decoration: InputDecoration(
                labelText: 'Name',
                labelStyle: TextStyle(color: Color(0xFFF1FAEE)),
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 16),
            TextField(
              decoration: InputDecoration(
                labelText: 'Email',
                labelStyle: TextStyle(color: Color(0xFFF1FAEE)),
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 16),
            TextField(
              decoration: InputDecoration(
                labelText: 'Password',
                labelStyle: TextStyle(color: Color(0xFFF1FAEE)),
                border: OutlineInputBorder(),
              ),
              obscureText: true,
            ),
            SizedBox(height: 16),
            ElevatedButton(
              style: ElevatedButton.styleFrom(
                backgroundColor: Color(0xFFED174B),
                foregroundColor: Color(0xFFF1FAEE),
              ),
              onPressed: () {
                Navigator.pushReplacementNamed(context, '/');
              },
              child: Text('Register'),
            ),
          ],
        ),
      ),
    );
  }
}



File: ./widgets/theme-1/user_activity_notification.dart
Code:
// lib/widgets/theme-1/user_activity_notification.dart

import 'package:flutter/material.dart';

class UserActivityNotification extends StatelessWidget {
  final String activityText;
  final String avatarUrl;

  UserActivityNotification({
    required this.activityText,
    required this.avatarUrl,
  });

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: EdgeInsets.symmetric(vertical: 10),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: Padding(
        padding: EdgeInsets.all(16),
        child: Row(
          children: [
            CircleAvatar(
              radius: 30,
              backgroundImage: NetworkImage(avatarUrl),
            ),
            SizedBox(width: 16),
            Expanded(
              child: Text(
                activityText,
                style: TextStyle(
                  fontSize: 16,
                  color: Colors.grey[800],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}



File: ./widgets/theme-1/app_bar.dart
Code:
import 'package:flutter/material.dart';

class CustomAppBar extends StatelessWidget implements PreferredSizeWidget {
  final bool showBackButton;

  CustomAppBar({this.showBackButton = true});

  @override
  Widget build(BuildContext context) {
    return AppBar(
      leading: showBackButton
          ? IconButton(
              icon: Icon(Icons.arrow_back, color: Colors.white),
              onPressed: () {
                Navigator.of(context).pop();
              },
            )
          : null,
      title: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Row(
            children: [
              Icon(Icons.cloud, color: Colors.white),
              SizedBox(width: 8),
              Text(
                'BetsUp',
                style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold, fontSize: 24, fontFamily: 'GameFont'),
              ),
              Text(
                '.io',
                style: TextStyle(color: Colors.white, fontSize: 14, fontFamily: 'GameFont'),
              ),
            ],
          ),
          Row(
            children: [
              IconButton(
                icon: Icon(Icons.emoji_events, color: Colors.white),
                onPressed: () {},
              ),
              IconButton(
                icon: Icon(Icons.extension, color: Colors.white),
                onPressed: () {},
              ),
              IconButton(
                icon: Icon(Icons.person, color: Colors.white),
                onPressed: () {
                  Navigator.pushNamed(context, '/login');
                },
              ),
            ],
          ),
        ],
      ),
      elevation: 0,
      backgroundColor: Color(0xFF0A1C28),
    );
  }

  @override
  Size get preferredSize => Size.fromHeight(kToolbarHeight);
}



File: ./widgets/theme-1/login_screen.dart
Code:
// lib/screens/authenticate/login.dart

import 'package:flutter/material.dart';

class LoginScreen extends StatefulWidget {
  @override
  _LoginScreenState createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Login'),
      ),
      body: SingleChildScrollView(
        padding: EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Center(
              child: Image.asset(
                'assets/images/logo.png',
                height: 100,
              ),
            ),
            SizedBox(height: 20),
            Container(
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Color(0xFFF1FAEE),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Welcome Back!',
                    style: TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: Color(0xFF1D3557),
                      fontFamily: 'GameFont',
                    ),
                  ),
                  SizedBox(height: 8),
                  Text(
                    'Please login to continue',
                    style: TextStyle(
                      fontSize: 16,
                      color: Color(0xFF457B9D),
                    ),
                  ),
                  SizedBox(height: 16),
                  Form(
                    key: _formKey,
                    child: Column(
                      children: [
                        TextFormField(
                          controller: _emailController,
                          decoration: InputDecoration(
                            labelText: 'Email',
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                          ),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter your email';
                            } else if (!RegExp(r'^[^@]+@[^@]+\.[^@]+').hasMatch(value)) {
                              return 'Please enter a valid email';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 16),
                        TextFormField(
                          controller: _passwordController,
                          obscureText: true,
                          decoration: InputDecoration(
                            labelText: 'Password',
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                          ),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter your password';
                            }
                            return null;
                          },
                        ),
                      ],
                    ),
                  ),
                  SizedBox(height: 16),
                  ElevatedButton(
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Color(0xFFED174B),
                      foregroundColor: Colors.white,
                      padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    onPressed: () {
                      if (_formKey.currentState!.validate()) {
                        // Handle login logic
                      }
                    },
                    child: Text('Login'),
                  ),
                ],
              ),
            ),
            SizedBox(height: 20),
            Container(
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(12),
                boxShadow: [
                  BoxShadow(
                    color: Colors.grey.withOpacity(0.5),
                    spreadRadius: 5,
                    blurRadius: 7,
                    offset: Offset(0, 3),
                  ),
                ],
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Did you know?',
                    style: TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                      color: Color(0xFF1D3557),
                    ),
                  ),
                  SizedBox(height: 8),
                  Text(
                    'With WTF, you can participate in exciting challenges and earn rewards. Check out our FAQ section for more details.',
                    style: TextStyle(
                      fontSize: 16,
                      color: Color(0xFF457B9D),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}



File: ./widgets/theme-1/welcome_banner.dart
Code:
// lib/widgets/theme-1/welcome_banner.dart

import 'package:flutter/material.dart';

class WelcomeBanner extends StatelessWidget {
  final List<Map<String, String>> banners = [
    {
      'title': 'Bet on the Impossible',
      'subtitle': 'Win Big or Go Home!',
      'description': 'Join the latest challenges and compete for amazing prizes. Are you up for the challenge?',
      'buttonText': 'Join Challenge',
      'color': '#cc2936',
    },
    // {
    //   'title': 'Challenge Yourself',
    //   'subtitle': 'Achieve the Unthinkable!',
    //   'description': 'Take part in exciting new challenges and prove your mettle.',
    //   'buttonText': 'View Challenges',
    //   'color': '#ebbab9',
    // },
    // {
    //   'title': 'Get Rewarded',
    //   'subtitle': 'Earn Amazing Prizes!',
    //   'description': 'Participate and win rewards for completing challenges.',
    //   'buttonText': 'See Rewards',
    //   'color': '#2274a5',
    // },
  ];

  @override
  Widget build(BuildContext context) {
    return Container(
      height: 300,
      child: PageView.builder(
        itemCount: banners.length,
        itemBuilder: (context, index) {
          final banner = banners[index];
          final color = Color(int.parse(banner['color']!.substring(1, 7), radix: 16) + 0xFF000000);

          return Container(
            margin: EdgeInsets.symmetric(vertical: 10),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(12),
              color: color,
            ),
            child: Padding(
              padding: EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  Text(
                    banner['title']!,
                    style: TextStyle(
                      fontSize: 30,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                      fontFamily: 'GameFont',
                    ),
                  ),
                  SizedBox(height: 8),
                  Text(
                    banner['subtitle']!,
                    style: TextStyle(
                      fontSize: 16,
                      color: Colors.white,
                      fontFamily: 'GameFont',
                    ),
                  ),
                  SizedBox(height: 16),
                  Text(
                    banner['description']!,
                    style: TextStyle(
                      fontSize: 16,
                      color: Colors.white70,
                      fontFamily: 'GameFont',
                    ),
                  ),
                  SizedBox(height: 16),
                  ElevatedButton(
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.white,
                      foregroundColor: color,
                      padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    onPressed: () {},
                    child: Text(banner['buttonText']!),
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }
}



File: ./widgets/theme-1/bottom_navigation.dart
Code:
import 'package:flutter/material.dart';

class CustomBottomNavigationBar extends StatelessWidget {
  final int selectedIndex;
  final Function(int) onItemTapped;

  CustomBottomNavigationBar({required this.selectedIndex, required this.onItemTapped});

  @override
  Widget build(BuildContext context) {
    return BottomNavigationBar(
      items: const <BottomNavigationBarItem>[
        BottomNavigationBarItem(
          icon: Icon(Icons.home),
          label: 'Home',
        ),
        BottomNavigationBarItem(
          icon: Icon(Icons.whatshot),
          label: 'Challenges',
        ),
        BottomNavigationBarItem(
          icon: Icon(Icons.person),
          label: 'Profile',
        ),
      ],
      currentIndex: selectedIndex,
      selectedItemColor: Color(0xFFF1FAEE),
      unselectedItemColor: Color(0xFF234159),
      onTap: onItemTapped,
    );
  }
}



File: ./widgets/theme-1/challenge_card.dart
Code:

import 'package:flutter/material.dart';
import 'challenge_detail_screen.dart';
class ChallengeCard extends StatelessWidget {
  final IconData icon;
  final String category;
  final int participants;
  final String title;
  final String description;
  final int prize;

  // Assuming a radius value is already defined
  static const double borderRadius = 12.0;

  ChallengeCard({
    required this.icon,
    required this.category,
    required this.participants,
    required this.title,
    required this.description,
    required this.prize,
  });

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => ChallengeDetailScreen(),
            settings: RouteSettings(
              arguments: {
                'icon': icon,
                'category': category,
                'participants': participants,
                'title': title,
                'description': description,
                'prize': prize,
              },
            ),
          ),
        );
      },
      child: Card(
        margin: EdgeInsets.symmetric(vertical: 10),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(borderRadius),
        ),
        child: Padding(
          padding: EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Icon(icon, size: 40, color: Colors.blue),
                  SizedBox(width: 10),
                  Text(
                    category,
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  ),
                ],
              ),
              SizedBox(height: 10),
              Text(
                title,
                style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
              ),
              SizedBox(height: 10),
              Text(description),
              SizedBox(height: 10),
              Text('$participants participants'),
              SizedBox(height: 10),
              Text('\$$prize prize'),
            ],
          ),
        ),
      ),
    );
  }
}



File: ./widgets/theme-1/home_screen.dart
Code:
// lib/widgets/theme-1/home_screen.dart

import 'package:flutter/material.dart';
import 'challenge_card.dart';
import 'ad_banner.dart';
import 'user_activity_notification.dart';
import 'feed_item.dart';
import 'colors.dart';
import 'welcome_banner.dart';

class HomeScreen extends StatelessWidget {
  final List<FeedItem> feedItems = generateFeedItems();

  @override
  Widget build(BuildContext context) {
    return ListView.builder(
      padding: EdgeInsets.all(16),
      itemCount: feedItems.length + 1, // +1 for the welcome banner
      itemBuilder: (context, index) {
        if (index == 0) {
          // Welcome banner at the top
          return WelcomeBanner();
        }

        final item = feedItems[index - 1]; // Adjust index for feed items
        switch (item.type) {
          case FeedItemType.challenge:
            return ChallengeCard(
              icon: item.data['icon'],
              category: item.data['category'],
              participants: item.data['participants'],
              title: item.data['title'],
              description: item.data['description'],
              prize: item.data['prize'],
            );
          case FeedItemType.ad:
            return AdBanner(
              imageUrl: item.data['imageUrl'],
              adText: item.data['adText'],
              color: getAdBannerColor(index), // Assign background color
            );
          case FeedItemType.userActivity:
            return UserActivityNotification(
              activityText: item.data['activityText'],
              avatarUrl: item.data['avatarUrl'], // Pass avatar URL
            );
        }
      },
    );
  }
}

Color getAdBannerColor(int index) {
  List<Color> colors = [
    Color(0xFF32936F),
    Color(0xFF2274A5),
    Color(0xFFCC2936),
  ];
  return colors[index % colors.length];
}

List<FeedItem> generateFeedItems() {
  List<FeedItem> items = [];
  int challengeCount = 0;
  int adCount = 0;
  int userActivityCount = 0;

  // Sample data
  final challenges = [
    {
      'icon': Icons.fitness_center,
      'category': 'Fitness',
      'participants': 10,
      'title': '100 Push-ups in 60 Seconds',
      'description': 'Can you beat the record and win the 500 dollars prize?',
      'prize': 500,
    },
    {
      'icon': Icons.sports_basketball,
      'category': 'Sports',
      'participants': 15,
      'title': 'Basketball Free Throw Challenge',
      'description': 'Can you make 20 free throws in a row?',
      'prize': 750,
    },
    {
      'icon': Icons.lightbulb_outline,
      'category': 'Creativity',
      'participants': 8,
      'title': 'Origami Masterpiece',
      'description': 'Create the most intricate origami sculpture.',
      'prize': 300,
    },
    {
      'icon': Icons.code,
      'category': 'Tech',
      'participants': 12,
      'title': 'Hackathon Challenge',
      'description': 'Build the most innovative app in 24 hours.',
      'prize': 1000,
    },
  ];

  final ads = [
    {
      'imageUrl': 'https://example.com/ad1.jpg',
      'adText': 'Get 50% off on your next sports gear purchase! Use code BETSUP50.',
    },
    {
      'imageUrl': 'https://example.com/ad2.jpg',
      'adText': 'Join the ultimate gaming tournament and win exciting prizes! Register now.',
    },
    {
      'imageUrl': 'https://example.com/ad3.jpg',
      'adText': 'Discover the best health and fitness tips from our experts. Sign up for free.',
    },
  ];

  final userActivities = [
    {
      'activityText': 'User John completed the 100 Push-ups in 60 Seconds challenge!',
      'avatarUrl': 'https://randomuser.me/api/portraits/men/1.jpg',
    },
    {
      'activityText': 'User Jane won the Basketball Free Throw Challenge!',
      'avatarUrl': 'https://randomuser.me/api/portraits/women/2.jpg',
    },
    {
      'activityText': 'User Bob joined the Hackathon Challenge!',
      'avatarUrl': 'https://randomuser.me/api/portraits/men/3.jpg',
    },
    {
      'activityText': 'User Alice mastered the Origami Masterpiece challenge!',
      'avatarUrl': 'https://randomuser.me/api/portraits/women/4.jpg',
    },
  ];

  int totalItems = challenges.length + ads.length + userActivities.length;

  for (int i = 0; i < totalItems; i++) {
    if (challengeCount < challenges.length) {
      items.add(FeedItem(type: FeedItemType.challenge, data: challenges[challengeCount]));
      challengeCount++;
    }
    if ((i + 1) % 3 == 0 && adCount < ads.length) {
      items.add(FeedItem(type: FeedItemType.ad, data: ads[adCount]));
      adCount++;
    }
    if ((i + 1) % 4 == 0 && userActivityCount < userActivities.length) {
      items.add(FeedItem(type: FeedItemType.userActivity, data: userActivities[userActivityCount]));
      userActivityCount++;
    }
  }

  return items;
}



File: ./widgets/theme-1/feed_item.dart
Code:
enum FeedItemType { challenge, ad, userActivity }

class FeedItem {
  final FeedItemType type;
  final dynamic data;

  FeedItem({required this.type, required this.data});
}



